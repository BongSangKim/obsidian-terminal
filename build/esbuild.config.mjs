import builtins from "builtin-modules"
import esbuild from "esbuild"
import lodashES from "lodash-es"
import process from "node:process"
import sveltePlugin from "esbuild-svelte"
import sveltePreprocess from "svelte-preprocess"

const ARGV_PRODUCTION = 2,
	COMMENT = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD.
If you want to view the source, please visit the repository of this plugin.
*/`,
	production = process.argv[ARGV_PRODUCTION] === "production",
	build = await esbuild.context({
		alias: {},
		banner: { js: COMMENT },
		bundle: true,
		color: true,
		drop: [],
		entryPoints: ["sources/main.ts"],
		external: [
			"electron",
			"obsidian",
			"@codemirror/autocomplete",
			"@codemirror/collab",
			"@codemirror/commands",
			"@codemirror/language",
			"@codemirror/lint",
			"@codemirror/search",
			"@codemirror/state",
			"@codemirror/view",
			"@lezer/common",
			"@lezer/highlight",
			"@lezer/lr",
			"node:*",
			...builtins,
		],
		footer: { js: COMMENT },
		format: "cjs",
		jsx: "transform",
		legalComments: "inline",
		loader: {
			".md": "text",
			".py": "text",
		},
		logLevel: "info",
		logLimit: 0,
		metafile: true,
		minify: production,
		outfile: "main.js",
		platform: "browser",
		plugins: [
			sveltePlugin({
				cache: "overzealous",
				compilerOptions: {
					accessors: false,
					css: "injected",
					cssHash({ name }) {
						return `terminal-svelte-${lodashES.kebabCase(name)}`
					},
					customElement: false,
					dev: !production,
					enableSourcemap: {
						css: !production,
						js: true,
					},
					errorMode: "throw",
					format: "esm",
					generate: "dom",
					hydratable: false,
					immutable: true,
					legacy: false,
					loopGuardTimeout: 0,
					preserveComments: false,
					preserveWhitespace: false,
					varsReport: "full",
				},
				filterWarnings: lodashES.constant(true),
				fromEntryFile: false,
				include: /\.svelte$/u,
				preprocess: [
					sveltePreprocess({
						aliases: [],
						globalStyle: {
							sourceMap: !production,
						},
						preserve: [],
						replace: [],
						sourceMap: false,
						typescript: {
							compilerOptions: {},
							handleMixedImports: true,
							reportDiagnostics: true,
							tsconfigDirectory: "./",
							tsconfigFile: "./tsconfig.json",
						},
					}),
				],
			}),
		],
		sourcemap: production
			? false
			: "inline",
		sourcesContent: true,
		target: "ES2018",
		treeShaking: true,
	})
if (production) {
	try {
		const { errors, warnings, metafile } = await build.rebuild()
		if (!lodashES.isUndefined(metafile)) {
			console.log(await esbuild.analyzeMetafile(metafile, {
				color: true,
				verbose: true,
			}))
		}
		for (const { data, kind, log } of [
			{ data: warnings, kind: "warning", log: console.warn.bind(console) },
			{ data: errors, kind: "error", log: console.error.bind(console) },
		]) {
			if (!lodashES.isEmpty(data)) {
				// eslint-disable-next-line no-await-in-loop
				log((await esbuild.formatMessages(data, {
					color: true,
					kind,
				})).join("\n"))
			}
		}
	} finally {
		await build.dispose()
	}
} else {
	await build.watch({})
}
